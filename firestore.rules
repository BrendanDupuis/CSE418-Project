rules_version = '2';
service cloud.firestore {
match /databases/{database}/documents {
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(uid) {
    return isSignedIn() && request.auth.uid == uid;
  }

  function isChatParticipant(chatId) {
    return isSignedIn() && 
      exists(/databases/$(database)/documents/chat/$(chatId)) &&
      (request.auth.uid == get(/databases/$(database)/documents/chat/$(chatId)).data.user1 ||
        request.auth.uid == get(/databases/$(database)/documents/chat/$(chatId)).data.user2);
  }

  function userExists(uid) {
    return exists(/databases/$(database)/documents/users/$(uid));
  }

  function bothUsersExist(user1, user2) {
    return userExists(user1) && userExists(user2);
  }

  function isValidChatId(chatId) {
    // ChatId should be in format: userId1____userId2
    // where both user IDs are sorted alphabetically
    return chatId.matches('^[a-zA-Z0-9_-]+____[a-zA-Z0-9_-]+$');
  }

  function chatIdMatchesUsers(chatId, user1, user2) {
    // Extract user IDs from chatId and verify they match the provided users
    // ChatId format: userId1____userId2 (sorted alphabetically)
    let parts = chatId.split('____');
    return parts.size() == 2 
      && parts[0] == [user1, user2].sort()[0]
      && parts[1] == [user1, user2].sort()[1];
  }

  match /users/{uid} {
    // Any signed-in user can read user profiles
    allow read: if isSignedIn();
    
    // Only the user can create their own profile during signup
    allow create: if isOwner(uid)
      && request.resource.data.keys().hasOnly(['username','email','createdAt'])
      && request.resource.data.username is string
      && request.resource.data.email is string
      && request.resource.data.email == request.auth.token.email;
    
    allow update: if false;
    allow delete: if isOwner(uid);
  }
    
    
  // Chat documents
  match /chat/{chatId} {
    // Only participants can read the chat document
    allow read: if isChatParticipant(chatId);

    // Only participants can create chat documents
    // Both users must exist, creator must be one of them, and chatId format must be valid
    allow create: if isSignedIn() 
      && (request.auth.uid == request.resource.data.user1 || request.auth.uid == request.resource.data.user2)
      && request.resource.data.keys().hasOnly(['user1','user2','createdAt'])
      && bothUsersExist(request.resource.data.user1, request.resource.data.user2)
      && isValidChatId(chatId)
      && chatIdMatchesUsers(chatId, request.resource.data.user1, request.resource.data.user2);

    // chat documents are immutable
    allow update: if false;
    allow delete: if false

      // Messages subcollection
      match /messages/{messageId} {
        // Only chat participants can read messages
        allow read: if isChatParticipant(chatId);

        // Only chat participants can create messages
        allow create: if isChatParticipant(chatId)
          && request.auth.uid == request.resource.data.fromUserId
          && request.resource.data.keys().hasOnly(['text','fromUserId','timestamp'])
          && isValidChatId(chatId);

        allow update: if false;

        // Only the message sender can delete their own messages
        allow delete: if isChatParticipant(chatId)
          && request.auth.uid == resource.data.fromUserId;
      }
    }


    match /{document=**} {
      allow read, write: if false;
    }
  }
}